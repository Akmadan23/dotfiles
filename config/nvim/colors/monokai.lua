local c = require("colorschemes").monokai

local hl = {
    Normal          = { fg = c.fg1                                      },
    NormalFloat     = { fg = c.fg2,     bg = c.bg1                      },
    Boolean         = { fg = c.purple                                   },
    Character       = { fg = c.yellow                                   },
    Comment         = { fg = c.fg3                                      },
    Conceal         = { fg = c.bg3                                      },
    Conditional     = { fg = c.magenta,                 bold = true     },
    Constant        = { fg = c.purple,                  bold = true     },
    CursorLine      = {                 bg = c.bg2                      },
    CursorLineNr    = { fg = c.orange,                  bold = true     },
    Debug           = { fg = c.bg3,                     bold = true     },
    Define          = { fg = c.magenta                                  },
    Delimiter       = { fg = c.fg3                                      },
    Directory       = { fg = c.cyan,                    bold = true     },
    EndOfBuffer     = { fg = c.bg1                                      },
    Error           = { fg = c.red                                      },
    ErrorMsg        = { fg = c.red,                     bold = true     },
    Exception       = { fg = c.orange,                  bold = true     },
    Float           = { fg = c.purple                                   },
    Folded          = { fg = c.blue,    bg = c.bg1                      },
    Function        = { fg = c.green                                    },
    FunctionBuiltin = { fg = c.green,                   italic = true   },
    Identifier      = { fg = c.orange                                   },
    IdentifierAlt   = { fg = c.orange,                  italic = true   },
    Ignore          = { fg = c.bg3                                      },
    Include         = { fg = c.magenta                                  },
    Italic          = {                                 italic = true   },
    Keyword         = { fg = c.magenta,                 bold = true     },
    Label           = { fg = c.magenta                                  },
    LineNr          = { fg = c.fg3,     bg = c.bg1                      },
    Macro           = { fg = c.green,                   italic = true   },
    MatchParen      = { fg = c.orange,  bg = c.black                    },
    ModeMsg         = { fg = c.fg1,                     bold = true     },
    Number          = { fg = c.purple                                   },
    Operator        = { fg = c.magenta                                  },
    PreProc         = { fg = c.orange                                   },
    PreCondit       = { fg = c.orange                                   },
    Question        = { fg = c.yellow                                   },
    Reference       = { fg = c.blue,                    underline = true},
    Repeat          = { fg = c.magenta,                 bold = true     },
    Special         = { fg = c.cyan,                    italic = true   },
    SpecialChar     = { fg = c.cyan,                    italic = true   },
    SpecialComment  = { fg = c.fg3,                     italic = true   },
    SpecialKey      = { fg = c.cyan,                    italic = true   },
    SpecialKeyWord  = { fg = c.magenta, bold = true,    italic = true   },
    Statement       = { fg = c.magenta,                 bold = true     },
    StorageClass    = { fg = c.magenta                                  },
    String          = { fg = c.yellow                                   },
    Structure       = { fg = c.cyan                                     },
    Tag             = { fg = c.magenta,                 bold = true     },
    Title           = { fg = c.magenta,                 bold = true     },
    Todo            = { fg = c.purple                                   },
    Type            = { fg = c.cyan                                     },
    Typedef         = { fg = c.magenta                                  },
    TypeParameter   = { fg = c.cyan,                    bold = true     },
    VertSplit       = { fg = c.black,   bg = c.bg1                      },
    Visual          = {                 bg = c.bg2                      },
    VisualNOS       = { fg = c.black,   bg = c.bg2                      },
    WarningMsg      = { fg = c.fg1,                     bold = true     },
    Whitespace      = { fg = c.grey                                     },
    WinSeparator    = { fg = c.fg1,                                     },

    -- Search
    Search          = { fg = c.fg1,     bg = c.bg3      },
    IncSearch       = { fg = c.black,   bg = c.yellow   },

    -- Column
    ColorColumn     = {                 bg = c.bg1      },
    CursorColumn    = { bg = c.bg2                      },
    FoldColumn      = { fg = c.grey,    bg = c.black    },
    SignColumn      = { fg = c.fg1,     bg = c.bg1      },

    -- Tabline
    Tabline     = { fg = c.fg1, bg = c.grey                 },
    TabLineSel  = { fg = c.bg1, bg = c.yellow,  bold = true },
    TabLineFill = {             bg = c.grey                 },

    -- Diff
    DiffAdd     = { fg = c.blue,    bg = c.bg1 },
    DiffChange  = { fg = c.fg1,     bg = c.bg1 },
    DiffDelete  = { fg = c.red,     bg = c.bg1 },
    DiffText    = { fg = c.black,   bg = c.fg1 },

    -- Pmenu
    Pmenu       = { fg = c.fg1,     bg = c.bg1  },
    PmenuSbar   = {                 bg = c.grey },
    PmenuSel    = { fg = c.bg1,     bg = c.blue },
    PmenuThumb  = { fg = c.purple,  bg = c.fg2  },

    -- Spell
    SpellBad    = { fg = c.red,     undercurl = true },
    SpellCap    = { fg = c.blue,    undercurl = true },
    SpellLocal  = { fg = c.cyan,    undercurl = true },
    SpellRare   = { fg = c.purple,  undercurl = true },

    -- Fidget
    FidgetTitle = { link = "Keyword" },
    FidgetTask  = { link = "Comment" },

    -- NvimTree
    NvimTreeExecFile        = { link = "Function"   },
    NvimTreeIndentMarker    = { link = "Normal"    },
    NvimTreeModifiedFile    = { link = "Keyword"    },
    NvimTreeRootFolder      = { link = "Constant"   },
    NvimTreeSpecialFile     = { link = "Identifier" },
    NvimTreeSymlink         = { link = "Number"     },

    -- GitSigns
    GitSignsCurrentLineBlame    = { link = "Comment" },

    -- IndentBlankLine
    IblIndent       = { link = "Whitespace" },
    IblWhitespace   = { link = "Normal"     },

    -- nvim-cmp
    CmpItemAbbr         = { fg = c.fg1      },
    CmpItemAbbrMatch    = { fg = c.blue     },
    CmpItemMenu         = { fg = c.fg1      },
    CmpItemKindVariable = { fg = c.fg1      },
    CmpItemKindEnum     = { fg = c.cyan     },
    CmpItemKindClass    = { fg = c.cyan     },
    CmpItemKindMethod   = { fg = c.green    },
    CmpItemKindFunction = { fg = c.green    },
    CmpItemKindKeyWord  = { fg = c.magenta  },
    CmpItemKindField    = { fg = c.orange   },
    CmpItemKindModule   = { fg = c.orange   },
    CmpItemKindProperty = { fg = c.orange   },
    CmpItemKindConstant = { fg = c.purple   },
    CmpItemKindSnippet  = { fg = c.purple   },
    CmpItemKindFile     = { fg = c.magenta  },
    CmpItemKindFolder   = { fg = c.cyan     },
    CmpItemKindText     = { fg = c.fg3      },

    -- Telescope
    TelescopeTitle          = { fg = c.magenta,                 bold = true },
    TelescopeBorder         = { fg = c.yellow                               },
    TelescopePromptBorder   = { fg = c.cyan                                 },
    TelescopePromptCounter  = { fg = c.purple,                  bold = true },
    TelescopeMatching       = { fg = c.yellow,             underline = true },
    TelescopeSelection      = {                 bg = c.bg2,     bold = true },
    TelescopeSelectionCaret = { fg = c.yellow                               },
    TelescopeMultiSelection = { fg = c.blue                                 },

    -- Treesitter
    ["@attribute"]                  = { link = "IdentifierAlt"  },
    ["@comment.documentation"]      = { link = "SpecialComment" },
    ["@conditional"]                = { link = "Conditional"    },
    ["@constructor"]                = { link = "Type"           },
    ["@constructor.lua"]            = {                         },
    ["@define"]                     = { link = "Define"         },
    ["@exception"]                  = { link = "Exception"      },
    ["@field"]                      = { link = "Identifier"     },
    ["@float"]                      = { link = "Float"          },
    ["@function.builtin"]           = { link = "Macro"          },
    ["@function.macro"]             = { link = "Macro"          },
    ["@include"]                    = { link = "Include"        },
    ["@keyword.import"]             = { link = "Include"        },
    ["@keyword.luap"]               = { link = "Special"        },
    ["@keyword.coroutine.rust"]     = { link = "Operator"       },
    ["@keyword.modifier"]           = { link = "SpecialKeyword" },
    -- ["@keyword.return.php"]         = {                         },
    ["@label.json"]                 = { link = "Identifier"     },
    ["@label.php"]                  = { link = "Normal"     },
    ["@markup.heading"]             = { bold = true             },
    ["@markup.raw.block.markdown"]  = {                         },
    ["@method"]                     = { link = "Function"       },
    ["@module"]                     = { link = "Identifier"     },
    ["@namespace"]                  = { link = "Identifier"     },
    ["@namespace.rasi"]             = { link = "Type"           },
    ["@namespace.builtin.lua"]      = { italic = true           },
    ["@parameter"]                  = { link = "Identifier"     },
    ["@preproc"]                    = { link = "PreProc"        },
    ["@punctuation.special.bash"]   = { link = "Delimiter"      },
    ["@punctuation.special.query"]  = { link = "Delimiter"      },
    ["@repeat"]                     = { link = "Repeat"         },
    ["@string.regexp.bash"]         = { link = "String"         },
    ["@symbol"]                     = { link = "Identifier"     },
    ["@tag.delimiter"]              = { link = "Delimiter"      },
    ["@tag.attribute"]              = { link = "Identifier"     },
    ["@tag.builtin"]                = { link = "Special"        },
    ["@tag.yuck"]                   = { link = "Type"           },
    ["@text.literal"]               = { link = "Identifier"     },
    ["@text.emphasis"]              = { italic = true           },
    ["@text.environment"]           = { link = "Keyword"        },
    ["@text.environment.name"]      = { link = "Type"           },
    ["@text.math"]                  = { link = "Special"        },
    ["@text.reference"]             = { link = "Reference"      },
    ["@text.strong"]                = { bold = true             },
    ["@text.title"]                 = { bold = true             },
    ["@text.uri.xml"]               = { link = "String"         },
    ["@type.builtin"]               = { link = "Type"           },
    ["@type.qualifier"]             = { link = "Keyword"        },
    ["@variable"]                   = { link = "Normal"         },
    ["@variable.bash"]              = { link = "Identifier"     },
    ["@variable.member"]            = { link = "Identifier"     },
    ["@variable.parameter"]         = { link = "Identifier"     },
    ["@variable.builtin"]           = { italic = true           },
    ["@variable.lilypond"]          = { link = "Special"        },
    ["@variable.php"]               = { link = "Identifier"     },

    -- LSP
    ["@lsp.type.attributeBracket"]              = { link = "Delimiter"  },
    ["@lsp.type.builtinType"]                   = { link = "Type"       },
    ["@lsp.type.builtinAttribute.rust"]         = { link = "IdentifierAlt" },
    ["@lsp.type.enumMember.ocaml"]              = { link = "@lsp"       },
    ["@lsp.type.formatSpecifier.rust"]          = { link = "Delimiter"  },
    ["@lsp.type.function.ocaml"]                = { link = "@lsp"       },
    ["@lsp.type.generic.rust"]                  = { link = "@lsp" },
    ["@lsp.type.macro.c"]                       = { link = "@lsp"       },
    ["@lsp.type.macro.cpp"]                     = { link = "@lsp"       },
    ["@lsp.type.macro.rust"]                    = { link = "Macro"      },
    ["@lsp.type.namespace"]                     = { link = "@namespace" },
    ["@lsp.type.namespace.ocaml"]               = { link = "@lsp"       },
    ["@lsp.type.parameter"]                     = { link = "@lsp"       },
    ["@lsp.type.selfTypeKeyword.rust"]          = { link = "Type"       },
    ["@lsp.type.struct.rust"]                   = { link = "@lsp"       },
    ["@lsp.type.typeParameter"]                 = { link = "TypeParameter" },
    ["@lsp.type.variable"]                      = { link = "@lsp"       },
    ["@lsp.type.variable.rust"]                 = { link = "Normal"     },
    ["@lsp.typemod.keyword.macro.rust"]         = { link = "Keyword"    },
    ["@lsp.typemod.keyword.public.rust"]        = { bold = true         },
    ["@lsp.typemod.parameter.declaration.rust"] = { link = "@parameter" },
    ["@lsp.typemod.variable.constant.rust"]     = { link = "Constant"   },
    ["@lsp.typemod.variable.callable.rust"]     = { link = "@function"   },
}

for group, conf in pairs(hl) do
    vim.api.nvim_set_hl(0, group, conf)
end
